// figure out imports later




op_0_malloc         INT_SIZE
set_op_0_val        INT_SIZE  00 00 00 05
set_stack_from_op_0 00

op_0_malloc         INT_SIZE
set_op_0_val        08
set_op_1_from_stack 00
op_int_add
set_stack_from_op_0 01

op_0_malloc         00 0a
set_op_0_val        00 0a  "My string" 0
set_stack_from_op_0 02

-----

LITERALS:

HEX     -- 0e7e        -- 3710 // 2 bytes long
CHAR    -- 'f' 'o' 'o' -- 0x666f6f
STRING  -- "foo"       -- 0x666f6f // not auto null terminated
        -- "foo" 0     -- 0x666f6f00 // add 0 for null term


CONSTANTS:

INT_SIZE = 00 04
FLOAT_SIZE = 00 04


INSTRUCTIONS SO FAR:

// Leave room for as many instructions as we could possibly want
see_next_1_byte <instruction_set_b:1> <instruction_args:?>
see_next_2_bytes <instruction_set_c:2> <instruction_args:?>

// Malloc size memory and put pointer in op slot
op_0_malloc <size:2>
op_1_malloc <size:2>

// Dereference pointer in op slot and set value
set_op_0_val <size:2> <value:size>
set_op_1_val <size:2> <value:size>

// Put pointer at stack slot into op slot
set_op_0_from_stack <stack_index:1>
set_op_1_from_stack <stack_index:1>
set_op_0_from_big_stack <stack_index:2>
set_op_1_from_big_stack <stack_index:2>

// Put pointer at op slot into stack slot
set_stack_from_op_0 <stack_index:1>
set_stack_from_op_1 <stack_index:1>
set_big_stack_from_op_0 <stack_index:2>
set_big_stack_from_op_1 <stack_index:2>

// Do an integer operation, op_1 on op_0, and put the result in op_0 
op_int_add
op_int_sub
op_int_mul
op_int_div
op_int_mod
